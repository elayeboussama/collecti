{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n  var dark = _ref.dark,\n    layout = _ref.layout,\n    insets = _ref.insets,\n    style = _ref.style;\n  var _useTheme = useTheme(),\n    darkTheme = _useTheme.dark;\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    overlapping = _React$useState2[0],\n    setOverlapping = _React$useState2[1];\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark !== null && dark !== void 0 ? dark : !darkTheme;\n  return React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["useTheme","React","ModalStatusBarManager","dark","layout","insets","style","darkTheme","overlapping","setOverlapping","useState","scale","width","offset","top","flattenedStyle","StyleSheet","flatten","translateY","transform","find","s","undefined","useEffect","listener","value","sub","addListener","removeListener","darkContent"],"mappings":";AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAaA,eAAe,SAASC,qBAAT,CAAA,IAAA,EAKL;EAAA,IAAA,qBAAA,EAAA,sBAAA;EALoC,IAC5CC,IAD4C,GAKpC,IAAA,CAJRA,IAD4C;IAE5CC,MAF4C,GAKpC,IAAA,CAHRA,MAF4C;IAG5CC,MAH4C,GAKpC,IAAA,CAFRA,MAH4C;IAI5CC,KAAAA,GACQ,IAAA,CADRA,KAAAA;EAEA,gBAA4BN,QAAQ,EAApC;IAAcO,SAAAA,aAANJ,IAAI;EACZ,sBAAsCF,KAAK,CAACS,QAANT,CAAe,IAAfA,CAAtC;IAAA;IAAOO,WAAD;IAAcC,cAAd;EAEN,IAAME,KAAK,GAAG,CAAA,GAAI,EAAA,GAAKP,MAAM,CAACQ,KAA9B;EACA,IAAMC,MAAM,GAAG,CAACR,MAAM,CAACS,GAAPT,GAAa,EAAd,IAAoBM,KAAnC;EAEA,IAAMI,cAAc,GAAGC,UAAU,CAACC,OAAXD,CAAmBV,KAAnBU,CAAvB;EACA,IAAME,UAAU,GAAGH,cAAH,KAAA,IAAA,IAAGA,cAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAGA,cAAc,CAAEI,SAAnB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAGJ,qBAAAA,CAA2BK,IAA3BL,CAChBM,UAAAA,CAAD;IAAA,OAAYA,CAAC,CAACH,UAAFG,KAAiBC,SADZP;EAAAA,EAAH,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAEhBG,UAFH;EAIAjB,KAAK,CAACsB,SAANtB,CAAgB,YAAM;IACpB,IAAMuB,QAAQ,GAAG,SAAXA,QAAQ,CAAG,KAAA,EAAkC;MAAjC,IAAEC,KAAAA,GAA+B,KAAA,CAA/BA,KAAAA;MAClBhB,cAAc,CAACgB,KAAK,GAAGZ,MAAT,CAAdJ;IACD,CAFD;IAIA,IAAMiB,GAAG,GAAGR,UAAH,KAAA,IAAA,IAAGA,UAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,UAAU,CAAES,WAAZT,CAAwBM,QAAxBN,CAAZ;IAEA,OAAO;MAAA,OAAMA,UAAN,KAAA,IAAA,IAAMA,UAAN,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAMA,UAAU,CAAEU,cAAZV,CAA2BQ,GAA3BR,CAAb;IAAA;EACD,CARDjB,EAQG,CAACY,MAAD,EAASK,UAAT,CARHjB,CAAAA;EAUA,IAAM4B,WAAW,GAAG1B,IAAH,KAAA,IAAA,IAAGA,IAAH,KAAA,KAAA,CAAA,GAAGA,IAAH,GAAW,CAACI,SAA7B;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;IACE,QAAQ,EAAA,IADV;IAEE,QAAQ,EAAEC,WAAW,IAAIqB,WAAfrB,GAA6B,cAA7BA,GAA8C;EAF1D,CAAA,CADF;AAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}